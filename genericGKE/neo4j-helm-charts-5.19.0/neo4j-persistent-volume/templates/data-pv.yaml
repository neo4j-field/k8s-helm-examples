{{- with .Values.data }}
kind: "PersistentVolume"
apiVersion: "v1"
metadata:
  # n.b. persistent volumes don't seem to belong to namespaces
  name: "{{ $.Release.Name }}-pv"
  labels:
    # the app name is used to link this persistent volume to the Neo4j StatefulSet
    app: "{{ template "neo4j.appName" $ }}"
    helm.neo4j.com/volume-role: "data"
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: "{{ required "data.capacity.storage must be set explicitly" .capacity.storage }}"
  csi:
    driver: "{{ required "data.driver is required (e.g. my-disk)" .driver }}"
    volumeHandle: "{{ required "data.volumeHandle is required (e.g. my-disk)" .volumeHandle }}"
    fsType: "{{ .fsType }}"
  persistentVolumeReclaimPolicy: "{{ .reclaimPolicy }}"
  storageClassName: "{{ .storageClassName }}"
{{- if .createPvc}}
  claimRef:
    name: "{{ $.Release.Name }}-pvc"
    namespace: {{ $.Release.Namespace }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ $.Release.Name }}-pvc"
  labels:
    helm.neo4j.com/volume-role: "data"
    app: "{{ template "neo4j.appName" $ }}"
spec:
  storageClassName: "{{ .storageClassName }}"
  volumeName: "{{ $.Release.Name }}-pv"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ required "data.capacity.storage must be set explicitly" .capacity.storage }}"
{{- end }}
{{- if .createStorageClass}}
    {{- $storageClass := (lookup "storage.k8s.io/v1" "StorageClass" $.Release.Namespace $.Values.data.storageClassName) }}
    {{- if not $storageClass }}
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: manual
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

{{- end }}
{{- end }}
{{- end }}
