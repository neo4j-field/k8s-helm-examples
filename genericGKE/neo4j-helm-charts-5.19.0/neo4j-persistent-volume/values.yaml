# Default values for Neo4j Disk for Google Cloud Platform.

neo4j:
  # name of your neo4j deployment
  name: ""

# Neo4j data volume (a Google Cloud Compute Persistent disk)
data:
  # gcePersistentDisk should be the name of a Google Cloud Compute Persistent disk that is in a Region/Zone accessible by your GKE cluster.
  # This persistent disk must already exist and not be in use
  #
  # A disk can be created using the gcloud cli:
  # gcloud compute disks create --size 100Gi --type pd-ssd --zone="${CLOUDSDK_COMPUTE_ZONE}" "${GCE_PERSISTENT_DISK_NAME}"
  # n.b. in Google Cloud disk IOPS are proportional to disk size. For good performance of Neo4j you may need to specify a disk size significantly larger than the
  # amount of storage that Neo4j requires.
  # We recommend a disk size of at least 1Ti for performance or load testing and at least 100Gi for development work.

  # CSI driver for storage provisioning. For AWS use ebs.csi.aws.com, GCP use pd.csi.storage.gke.io and Azure use disk.csi.azure.com
  driver: ""
  # The reference to pre-created disk.
  # For AWS use Volume ID,
  # GCP use projects/{project_id}/zones/{zone_name}/disks/{disk_name}
  # Azure use /subscriptions/{sub-id}/resourcegroups/{group-name}/providers/microsoft.compute/disks/{disk-id}
  volumeHandle: ""
  # size of disk used by K8s when scheduling and binding, this has to be passed explicitly to K8s, it's not capable of figuring this out for itself.
  capacity:
    storage: ""

  # storageClassName to attach to the PersistentVolume in K8s. Can be set to empty string.
  storageClassName: "manual"
  fsType: "ext4"
  createPvc: true
  createStorageClass: false
  reclaimPolicy: Retain


# Neo4j ops volume (a Google Cloud Filestore File Share)
# not suitable for Neo4j database storage but useful for storing metrics / logs / backups and other operational files.
ops:
  # name of the Filestore file share to use (do NOT include a leading /)
  fileShare: ""
  # IP address of Filestore instance
  ipAddress: ""
  # size of disk used by K8s when scheduling and binding, this has to be passed explicitly to K8s, it's not capable of figuring this out for itself.
  capacity:
    storage: ""

  storageClassName: ""
