
gcloud beta container --project "neo4j-se-team-201905" clusters create "drose-vz1" --no-enable-basic-auth --cluster-version "1.28.7-gke.1026000" --release-channel "regular" --machine-type "n2d-standard-2" --image-type "COS_CONTAINERD" --disk-type "pd-ssd" --disk-size "100" --metadata disable-legacy-endpoints=true --scopes "https://www.googleapis.com/auth/cloud-platform" --num-nodes "3" --logging=SYSTEM,WORKLOAD --monitoring=SYSTEM --enable-ip-alias --network "projects/neo4j-se-team-201905/global/networks/mlpoc-vpc1" --subnetwork "projects/neo4j-se-team-201905/regions/us-central1/subnetworks/mlpoc-vpc1-proxy-subnet" --no-enable-intra-node-visibility --cluster-dns=clouddns --cluster-dns-scope=cluster --default-max-pods-per-node "50" --security-posture=standard --workload-vulnerability-scanning=disabled --enable-dataplane-v2 --no-enable-master-authorized-networks --addons HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver,GcpFilestoreCsiDriver --enable-autoupgrade --enable-autorepair --max-surge-upgrade 1 --max-unavailable-upgrade 0 --binauthz-evaluation-mode=DISABLED --enable-managed-prometheus --workload-pool "neo4j-se-team-201905.svc.id.goog" --enable-shielded-nodes --node-locations "us-central1-a","us-central1-b","us-central1-c"

helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.14.4 \
  --set installCRDs=true

export PROJECT=neo4j-se-team-201905  # Your Google Cloud project ID.
export REGION=us-central1   # Your Google Cloud region.
export CLUSTER=drose-autopilot
gcloud container clusters get-credentials $CLUSTER --region=us-central1 
gcloud compute addresses create drose-vz-ip --global
gcloud compute addresses describe web-ip --format='value(address)' --global
export IP_ADDRESS=34.49.80.28
export DOMAIN_NAME=neo4j.iclinicalgraph.com
#go do dns stuff now
#kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml
#do helm way
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml
helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.14.4 \
  # --set installCRDs=true
kubectl -n cert-manager get all

ERROR: 
create Pod standalone-0 in StatefulSet standalone failed error: admission webhook "validation.gatekeeper.sh" denied the request: [vzec-psp-allowprivilegeescalationcontainer] Privilege escalation container is not allowed: neo4j [vzsec-psp-capabilities] container <neo4j> is not dropping all required capabilities. Container must drop all of ["ALL"] or "ALL" [vzsec-psp-readonlyrootfilesystem] only read-only root filesystem container is allowed: neo4j
If set allowPrivilegeEscalation: false
we only get read-only root and 
create Pod standalone-0 in StatefulSet standalone failed error: admission webhook "validation.gatekeeper.sh" denied the request: [vzsec-psp-capabilities] container <neo4j> is not dropping all required capabilities. Container must drop all of ["ALL"] or "ALL" [vzsec-psp-readonlyrootfilesystem] only read-only root filesystem container is allowed: neo4j


# securityContext defines privilege and access control settings for a Pod. Making sure that we dont run Neo4j as root user.
securityContext:
  runAsNonRoot: true
  runAsUser: 7474
  runAsGroup: 7474
  fsGroup: 7474
  fsGroupChangePolicy: "Always"
 allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
