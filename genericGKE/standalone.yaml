neo4j:
  name: "standalone"
  resources:
    cpu: "1.100"
    memory: "5G"
  # Uncomment to set the initial password
  #password: "Neo4j123"
  passwordFromSecret: "neo4jpwd"
  offlineMaintenanceModeEnabled: false
  # Uncomment to use enterprise edition
  edition: "enterprise"
  acceptLicenseAgreement: "yes"
  minimumClusterSize: "1"

services:
  neo4j:
    # Do not create the LB; Create LB in separate manifest
    enabled: false

env:
  NEO4J_PLUGINS: '["apoc", "graph-data-science", "bloom", "genai"]'

config:
  server.backup.enabled: "true"
  server.config.strict_validation.enabled: "false"
  db.logs.query.enabled: "OFF"
  gds.enterprise.license_file: "/licenses/local/gds.license"
  dbms.bloom.license_file: "/licenses/local/bloom.license"
  dbms.security.procedures.unrestricted: "apoc.*,bloom.*,gds.*,genai.*"
  server.unmanaged_extension_classes: "com.neo4j.bloom.server=/bloom"
  dbms.security.http_auth_allowlist: "/,/browser.*,/bloom.*"
  server.directories.plugins: "/var/lib/neo4j/plugins"
  server.memory.heap.initial_size: "2G"
  server.memory.heap.max_size: "2G"
  server.memory.pagecache.size: "1500M"
  server.directories.transaction.logs.root: /transactions
  #below for testing use only - TX log retention must match backup strategy and/or time for store copy
  db.tx_log.rotation.retention_policy: "1 hours"

apoc_config:
  apoc.export.file.enabled: "true"
  apoc.import.file.enabled: "true"
  apoc.trigger.enabled: "true"

additionalVolumeMounts:
  # This is to map the license configmap
  - name: license-keys
    mountPath: /licenses/local
    readOnly: true

additionalVolumes:
  - name: license-keys
    configMap:
      name: license-config

volumes:
  data:
    mode: "dynamic"
    dynamic:
      # In GKE;
      # * premium-rwo provisions SSD disks (recommended)
      # * standard-rwo provisions balanced SSD-backed disks
      # * standard provisions HDD disks
      #storageClassName: premium-rwo
      storageClassName: "neo4j-ssd"
      requests:
        storage: 100Gi
  transactions:
      mode: "dynamic"
      dynamic:
        storageClassName: "neo4j-ssd"
        accessModes:
          - ReadWriteOnce
        requests:
          storage: 50Gi
  # optional - create mount for import 
  