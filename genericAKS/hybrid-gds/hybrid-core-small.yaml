
#image:
#  imagePullPolicy: "Always"
  #customImage: "766746056086.dkr.ecr.us-east-2.amazonaws.com/drose-repo:neo4j-aeb281-5.9.0-enterprise-arm"
#  customImage: "766746056086.dkr.ecr.us-east-2.amazonaws.com/drose-repo:neo4j-axeb211-5.13.0-enterprise-arm"
#If a custom domain is in use
#clusterDomain: "neo4j.cluster.local"

neo4j:
  name: "neo4j"
  resources:
    cpu: "1"
    memory: "5Gi"
  # Uncomment to set the initial password
  password: "my-password"
  #passwordFromSecret: "neo4jpwd"
  offlineMaintenanceModeEnabled: false
  # Uncomment to use enterprise edition
  edition: "enterprise"
  acceptLicenseAgreement: "yes"
  minimumClusterSize: "3"

  labels:
    kubernetes.azure.com/nodepool-type: "primary"

nodeSelector:
  nodegroup: "neo4j"
  #kubernetes.io/service-name: "playsmall"

services:
  neo4j:
    # Do not create the LB
    enabled: false

env:
  NEO4J_PLUGINS: '["apoc", "bloom"]'

config:
  server.backup.enabled: "true"
  server.config.strict_validation: "false"
  db.logs.query.enabled: "OFF"
  dbms.routing.enabled: "true"
  dbms.bloom.license_file: "/licenses/local/bloom.license"
  dbms.security.procedures.unrestricted: "apoc.*,bloom.*"
  dbms.unmanaged_extension_classes: "com.neo4j.bloom.server=/bloom"
  dbms.security.http_auth_allowlist: "/,/browser.*,/bloom.*"
  server.directories.plugins: "/var/lib/neo4j/plugins"
  server.memory.heap.initial_size: "3G"
  server.memory.heap.max_size: "3G"
  server.memory.pagecache.size: "1G"
  server.directories.transaction.logs.root: /transactions
  server.metrics.enabled: "true"
  server.metrics.csv.interval: "30s"
  server.metrics.csv.rotation.keep_number: "5"
  server.metrics.csv.rotation.compression: "NONE"
  db.tx_log.rotation.retention_policy: "1 hours"
  initial.server.mode_constraint: "PRIMARY"
  initial.dbms.default_primaries_count: "3"
  initial.dbms.automatically_enable_free_servers: "true"

apoc_config:
  apoc.export.file.enabled: "true"
  apoc.import.file.enabled: "true"
  apoc.trigger.enabled: "true"

additionalVolumeMounts:
  - name: license-keys
    mountPath: /licenses/local
    readOnly: true

additionalVolumes:
  - name: license-keys
    configMap:
      name: license-config

volumes:
  data:
    mode: "dynamic"
    dynamic:
      # * managed-csi-premium provisions premium SSD disks (recommended)
      # * managed-csi provisions standard SSD backed disks
      storageClassName: managed-csi-premium
      requests:
        storage: 100Gi
  transactions:
    mode: "dynamic"
    dynamic:
      # * managed-csi-premium provisions premium SSD disks (recommended)
      # * managed-csi provisions standard SSD backed disks
      storageClassName: managed-csi-premium
      accessModes:
        - ReadWriteOnce
      requests:
        storage: 100Gi
#  import:
#    mode: volume
#    volume:
#      setOwnerAndGroupWritableFilePermissions: true
#      persistentVolumeClaim:
#        claimName: pvc-fs-dynamic
  